type CheckMeResponse {
  ok: Boolean!
  error: String
  me: MeType
}

type Query {
  CheckMe: CheckMeResponse!
  ListBills(cursor: ID, user_id: ID, title: String, hall: String): ListBillsResponse!
  ReadBill(id: ID!): ReadBillResponse!
  ViewCart: ViewCartResponse!
  ListItems(cursor: ID, name: String, divide: String, native: String): ListItemsResponse!
  ReadItem(id: ID!): ReadItemResponse!
}

type LoginResponse {
  ok: Boolean!
  error: String
  token: String
}

type Mutation {
  Login(username: String!, password: String!): LoginResponse!
  Password(password: String!): PasswordResponse!
  Register(username: String!, password: String!): RegisterResponse!
  AddBill(title: String!, hall: String!, etc: String!): AddBillResponse!
  AddReserve(bill_id: ID!, reserve: Int!): AddReserveResponse!
  RemoveBill(id: ID!): RemoveBillResponse!
  RemoveReserve(bill_id: ID!): RemoveReserveResponse!
  RestoreBill(id: ID!): RestoreBillResponse!
  AddCart(item_id: ID!, count: Int!, price: Int!): AddCartResponse!
  RemoveCart: RemoveCartResponse!
  RemoveCartItem(item_id: ID!): RemoveCartItemResponse!
  AddItem(name: String!, divide: String!, native: String!, unit: String!, price: Int!): AddItemResponse!
  RemoveItem(id: ID!): RemoveItemResponse!
  UpdateItem(id: ID!, name: String, divide: String, native: String, unit: String, price: Int): UpdateItemResponse!
}

type PasswordResponse {
  ok: Boolean!
  error: String
}

type RegisterResponse {
  ok: Boolean!
  error: String
}

type AddBillResponse {
  ok: Boolean!
  error: String
}

type AddReserveResponse {
  ok: Boolean!
  error: String
}

type ListBillsResponse {
  ok: Boolean!
  error: String
  bills: [Bill]
}

type ReadBillResponse {
  ok: Boolean!
  error: String
  bill: Bill
}

type RemoveBillResponse {
  ok: Boolean!
  error: String
}

type RemoveReserveResponse {
  ok: Boolean!
  error: String
}

type RestoreBillResponse {
  ok: Boolean!
  error: String
}

type AddCartResponse {
  ok: Boolean!
  error: String
  cart: Cart
}

type RemoveCartResponse {
  ok: Boolean!
  error: String
}

type RemoveCartItemResponse {
  ok: Boolean!
  error: String
}

type ViewCartResponse {
  ok: Boolean!
  error: String
  cart: Cart
}

type AddItemResponse {
  ok: Boolean!
  error: String
}

type ListItemsResponse {
  ok: Boolean!
  error: String
  items: [Item]
}

type ReadItemResponse {
  ok: Boolean!
  error: String
  item: Item
}

type RemoveItemResponse {
  ok: Boolean!
  error: String
}

type UpdateItemResponse {
  ok: Boolean!
  error: String
}

scalar Date

type User {
  id: ID!
  username: String!
  password: String!
  admin: Boolean!
  created_at: Date!
  updated_at: Date
}

type MeType {
  user_id: ID!
  username: String!
  admin: Boolean!
}

type InputItem {
  id: ID!
  name: String!
  divide: String!
  native: String!
  unit: String!
  price: Int!
  count: Int!
  amount: Int!
}

type Item {
  id: ID!
  num: Int!
  name: String!
  divide: String!
  native: String!
  unit: String!
  price: Int!
  created_at: Date!
  updated_at: Date
}

type Cart {
  id: ID!
  items: [InputItem]!
  completed: Boolean!
  deleted: Boolean!
  created_at: Date!
  updated_at: Date
  user_id: String!
  bill_id: String
}

type Bill {
  id: ID!
  title: String!
  hall: String!
  etc: String!
  total_amount: Int!
  items: [InputItem]
  reserve: Int
  username: String!
  user_id: String!
  cart_id: String!
  created_at: Date!
}

type Wedding {
  id: ID!
  husband_name: String!
  husband_image: String
  bride_name: String!
  bride_image: String
  wedding_at: String!
  event_at: String!
  cost_husband: Int!
  cost_bride: Int!
  meal_husband: Int!
  meal_bride: Int!
  present_husband: Int!
  present_bride: Int!
  reserve_husband: Int!
  reserve_bride: Int!
  created_at: Date!
  updated_at: Date
  conventionId: String
  convention: Convention
  companyId: String
  company: Company
  hanbokId: String
  hanbok: Hanbok
  eventId: String
  event: Event
  mealId: String
  meal: Meal
  presentId: String
  present: Present
  reserveId: String
  reserve: Reserve
}

type Company {
  id: ID!
  company_husband: Int!
  company_bride: Int!
  rooftop_husband: Int!
  rooftop_bride: Int!
  owner_woman_husband: Int!
  owner_woman_bride: Int!
  owner_man_husband: Int!
  owner_man_bride: Int!
  select_husband: Int!
  select_bride: Int!
  frame_husband: Int!
  frame_bride: Int!
  dress_husband: Int!
  dress_bride: Int!
  hairpin_husband: Int!
  hairpin_bride: Int!
  wig_husband: Int!
  wig_bride: Int!
  video_husband: Int!
  video_bride: Int!
  etc_husband: Int!
  etc_bride: Int!
  weddingId: String!
  wedding: Wedding!
}

type Convention {
  id: ID!
  rental_husband: Int!
  rental_bride: Int!
  sword_husband: Int!
  sword_bride: Int!
  glove_husband: Int!
  glove_bride: Int!
  bouquet_husband: Int!
  bouquet_bride: Int!
  ceremony_husband: Int!
  ceremony_bride: Int!
  weddingId: String
  wedding: Wedding
}

type Event {
  id: ID!
  play_husband: Int!
  play_bride: Int!
  anthem_husband: Int!
  anthem_bride: Int!
  moderator_husband: Int!
  moderator_bride: Int!
  officiate_husband: Int!
  officiate_bride: Int!
  weddingId: String
  wedding: Wedding
}

type Hanbok {
  id: ID!
  hanbok_pre_husband: Int!
  hanbok_pre_bride: Int!
  hanbok_post_husband: Int!
  hanbok_post_bride: Int!
  weddingId: String
  wedding: Wedding
}

type Meal {
  id: ID!
  meals: String!
  meals_price: Int!
  meals_num_husband: Int!
  meals_num_bride: Int!
  weddingId: String
  wedding: Wedding
}

type Present {
  id: ID!
  present: String!
  present_price: Int!
  present_num_husband: Int!
  present_num_bride: Int!
  weddingId: String
  wedding: Wedding
}

type Reserve {
  id: ID!
  reserve: String!
  reserve_pay: Int!
  weddingId: String
  wedding: Wedding
}
